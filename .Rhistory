facet_wrap(~names+part, labeller = label_parsed)
## cummulative mean plot
ggplot(df,aes(x=iteration,y=cm_pars))+
geom_line()+
facet_wrap(~names+part, labeller = label_parsed)
acf(part_a$beta)$acf
diag(acf(part_a$beta)$acf)
acf(part_a$beta)$acf[,1,1]
acf(part_a$beta)$acf[,2,2]
pars<-c(part_a$beta,part_b$beta,part_c$beta)
cm_pars<-c(apply(part_a$beta,2,cummean),apply(part_b$beta,2,cummean),apply(part_c$beta,2,cummean))
acf_a<-acf(part_a$beta)$acf
acf_b<-acf(part_b$beta)$acf
acf_c<-acf(part_c$beta)$acf
acf_pars<-c(acf_a[,1,1],acf_a[,2,2],acf_b[,1,1],acf_b[,2,2],acf_c[,1,1],acf_c[,2,2])
names<-c(rep("beta[0]",n),rep("beta[1]",n))%>%rep(3)
part<-c(rep("part_a",2*n),rep("part_b",2*n),rep("part_c",2*n))
iteration<-rep(1:n,6)
df<-tibble(pars,cm_pars,names,part,iteration)
acf_df<-tibble(acf_pars,lag = rep(1:length(acf_a[,1,1],6)))
pars<-c(part_a$beta,part_b$beta,part_c$beta)
cm_pars<-c(apply(part_a$beta,2,cummean),apply(part_b$beta,2,cummean),apply(part_c$beta,2,cummean))
acf_a<-acf(part_a$beta)$acf
acf_b<-acf(part_b$beta)$acf
acf_c<-acf(part_c$beta)$acf
acf_pars<-c(acf_a[,1,1],acf_a[,2,2],acf_b[,1,1],acf_b[,2,2],acf_c[,1,1],acf_c[,2,2])
names<-c(rep("beta[0]",n),rep("beta[1]",n))%>%rep(3)
part<-c(rep("part_a",2*n),rep("part_b",2*n),rep("part_c",2*n))
iteration<-rep(1:n,6)
df<-tibble(pars,cm_pars,names,part,iteration)
acf_df<-tibble(acf_pars,lag = rep(1:length(acf_a[,1,1]),6))
##  Trace Plot
ggplot(df,aes(x=iteration,y=pars))
geom_line()+
facet_wrap(~names+part, labeller = label_parsed)
pars<-c(part_a$beta,part_b$beta,part_c$beta)
cm_pars<-c(apply(part_a$beta,2,cummean),apply(part_b$beta,2,cummean),apply(part_c$beta,2,cummean))
acf_a<-acf(part_a$beta)$acf
acf_b<-acf(part_b$beta)$acf
acf_c<-acf(part_c$beta)$acf
acf_pars<-c(acf_a[,1,1],acf_a[,2,2],acf_b[,1,1],acf_b[,2,2],acf_c[,1,1],acf_c[,2,2])
names<-c(rep("beta[0]",n),rep("beta[1]",n))%>%rep(3)
part<-c(rep("part_a",2*n),rep("part_b",2*n),rep("part_c",2*n))
iteration<-rep(1:n,6)
df<-tibble(pars,cm_pars,names,part,iteration)
acf_df<-tibble(acf_pars,lag = rep(1:length(acf_a[,1,1]),6))
##  Trace Plot
ggplot(df,aes(x=iteration,y=pars))+
geom_line()+
facet_wrap(~names+part, labeller = label_parsed)
## cummulative mean plot
ggplot(df,aes(x=iteration,y=cm_pars))+
geom_line()+
facet_wrap(~names+part, labeller = label_parsed)
##  acf plot
ggplot(df_acf,aes(y=acf_pars,x = lag))+
geom_bar()+
facet_wrap(~names+part, labeller = label_parsed)
pars<-c(part_a$beta,part_b$beta,part_c$beta)
cm_pars<-c(apply(part_a$beta,2,cummean),apply(part_b$beta,2,cummean),apply(part_c$beta,2,cummean))
acf_a<-acf(part_a$beta)$acf
acf_b<-acf(part_b$beta)$acf
acf_c<-acf(part_c$beta)$acf
acf_pars<-c(acf_a[,1,1],acf_a[,2,2],acf_b[,1,1],acf_b[,2,2],acf_c[,1,1],acf_c[,2,2])
names<-c(rep("beta[0]",n),rep("beta[1]",n))%>%rep(3)
part<-c(rep("part_a",2*n),rep("part_b",2*n),rep("part_c",2*n))
iteration<-rep(1:n,6)
df<-tibble(pars,cm_pars,names,part,iteration)
df_acf<-tibble(acf_pars,lag = rep(1:length(acf_a[,1,1]),6))
##  Trace Plot
ggplot(df,aes(x=iteration,y=pars))+
geom_line()+
facet_wrap(~names+part, labeller = label_parsed)
## cummulative mean plot
ggplot(df,aes(x=iteration,y=cm_pars))+
geom_line()+
facet_wrap(~names+part, labeller = label_parsed)
##  acf plot
ggplot(df_acf,aes(y=acf_pars,x = lag))+
geom_bar()+
facet_wrap(~names+part, labeller = label_parsed)
acf_a<-acf(part_a$beta)$acf
acf_b<-acf(part_b$beta)$acf
acf_c<-acf(part_c$beta)$acf
m<-length(acf_a[,1,1])
acf_pars<-c(acf_a[,1,1],acf_a[,2,2],acf_b[,1,1],acf_b[,2,2],acf_c[,1,1],acf_c[,2,2])
names<-c(rep("beta[0]",m),rep("beta[1]",m))%>%rep(3)
part<-c(rep("part_a",2*m),rep("part_b",2*m),rep("part_c",2*m))
df_acf<-tibble(acf_pars,lag = rep(1:m,6),names, part)
##  Trace Plot
ggplot(df,aes(x=iteration,y=pars))+
geom_line()+
facet_wrap(~names+part, labeller = label_parsed)
## cummulative mean plot
ggplot(df,aes(x=iteration,y=cm_pars))+
geom_line()+
facet_wrap(~names+part, labeller = label_parsed)
##  acf plot
ggplot(df_acf,aes(y=acf_pars,x = lag))+
geom_bar()+
facet_wrap(~names+part, labeller = label_parsed)
ggplot(df_acf,aes(y=acf_pars)+
geom_bar()+
facet_wrap(~names+part, labeller = label_parsed)
ggplot(df_acf,aes(y=acf_pars))+
geom_bar()+
facet_wrap(~names+part, labeller = label_parsed)
plot(acf_pars)
?geom_bar
ggplot(df_acf,aes(y=acf_pars,x=lag))+
geom_bar(stat = "identity")+
facet_wrap(~names+part, labeller = label_parsed)
ggplot(df_acf,aes(y=acf_pars,x=lag))+
geom_bar(stat = "identity")+
facet_wrap(~names+part, labeller = label_parsed)
ggplot(df)+
geom_density()+
facet_wrap(~names+part, labeller = label_parsed)
ggplot(df)+
geom_density(aes(y=pars))+
facet_wrap(~names+part, labeller = label_parsed)
pars<-c(part_a$beta,part_b$beta,part_c$beta)
cm_pars<-c(apply(part_a$beta,2,cummean),apply(part_b$beta,2,cummean),apply(part_c$beta,2,cummean))
names<-c(rep("beta[0]",n),rep("beta[1]",n))%>%rep(3)
part<-c(rep("part_a",2*n),rep("part_b",2*n),rep("part_c",2*n))
iteration<-rep(1:n,6)
df<-tibble(pars,cm_pars,names,part,iteration)
acf_a<-acf(part_a$beta)$acf
acf_b<-acf(part_b$beta)$acf
acf_c<-acf(part_c$beta)$acf
m<-length(acf_a[,1,1])
acf_pars<-c(acf_a[,1,1],acf_a[,2,2],acf_b[,1,1],acf_b[,2,2],acf_c[,1,1],acf_c[,2,2])
names<-c(rep("beta[0]",m),rep("beta[1]",m))%>%rep(3)
part<-c(rep("part_a",2*m),rep("part_b",2*m),rep("part_c",2*m))
df_acf<-tibble(acf_pars,lag = rep(1:m,6),names, part)
##  Trace Plot
ggplot(df,aes(x=iteration,y=pars))+
geom_line()+
facet_wrap(~names+part, labeller = label_parsed)
## cummulative mean plot
ggplot(df,aes(x=iteration,y=cm_pars))+
geom_line()+
facet_wrap(~names+part, labeller = label_parsed)
##  acf plot
ggplot(df_acf,aes(y=acf_pars,x=lag))+
geom_bar(stat = "identity")+
facet_wrap(~names+part, labeller = label_parsed)
##  Posterior Density Plots
ggplot(df)+
geom_density(aes(x=pars))+
facet_wrap(~names+part, labeller = label_parsed)
knitr::cable(rbind(mcmcse::ess(part_a$beta),mcmcse::ess(part_b$beta),mcmcse::ess(part_c$beta)))
knitr::kable(rbind(mcmcse::ess(part_a$beta),mcmcse::ess(part_b$beta),mcmcse::ess(part_c$beta)))
ESS<-rbind(mcmcse::ess(part_a$beta),mcmcse::ess(part_b$beta),mcmcse::ess(part_c$beta))%>%
round(2)
knitr::kable(ESS,caption = "Effective Sample Size",col.names = c(expression(beta[0]),expression(beta[1])),row.names = c("part a"."part b","part c"))
ESS<-rbind(mcmcse::ess(part_a$beta),mcmcse::ess(part_b$beta),mcmcse::ess(part_c$beta))%>%
round(2)
knitr::kable(ESS,caption = "Effective Sample Size",col.names = c(expression(beta[0]),expression(beta[1])),row.names = c("part a","part b","part c"))
knitr::kable()
?knitr::kable()
ESS<-rbind(mcmcse::ess(part_a$beta),mcmcse::ess(part_b$beta),mcmcse::ess(part_c$beta))%>%
round(2)
knitr::kable(ESS,caption = "Effective Sample Size",col.names = c(expression(beta[0]),expression(beta[1])))
ESS<-rbind(mcmcse::ess(part_a$beta),mcmcse::ess(part_b$beta),mcmcse::ess(part_c$beta))%>%
round(2)%>%cbind(c("part a","part b","part c"))
knitr::kable(ESS,caption = "Effective Sample Size",col.names = c("model",expression(beta[0]),expression(beta[1])))
ESS<-rbind(mcmcse::ess(part_a$beta),mcmcse::ess(part_b$beta),mcmcse::ess(part_c$beta))%>%
round(2)
ESS<-cbind(c("part a","part b","part c"),ESS)
knitr::kable(ESS,caption = "Effective Sample Size",col.names = c("model",expression(beta[0]),expression(beta[1])))
ESS<-rbind(mcmcse::ess(part_a$beta),mcmcse::ess(part_b$beta),mcmcse::ess(part_c$beta))%>%
round(2)
ESS<-cbind(c("part a","part b","part c"),ESS)
knitr::kable(ESS,caption = "Effective Sample Size",col.names = c("Scheme",expression(beta[0]),expression(beta[1])))
?kableExtra::kable_styling
ESS<-rbind(mcmcse::ess(part_a$beta),mcmcse::ess(part_b$beta),mcmcse::ess(part_c$beta))%>%
round(2)
ESS<-cbind(c("part a","part b","part c"),ESS)
knitr::kable(ESS,caption = "Effective Sample Size",col.names = c("Scheme",expression(beta[0]),expression(beta[1])))%>%kableExtra::kable_styling(full_width = 50%)
ESS<-rbind(mcmcse::ess(part_a$beta),mcmcse::ess(part_b$beta),mcmcse::ess(part_c$beta))%>%
round(2)
ESS<-cbind(c("part a","part b","part c"),ESS)
knitr::kable(ESS,caption = "Effective Sample Size",col.names = c("Scheme",expression(beta[0]),expression(beta[1])))%>%kableExtra::kable_styling(full_width = FALSE)
ESS<-rbind(mcmcse::ess(part_a$beta),mcmcse::ess(part_b$beta),mcmcse::ess(part_c$beta))%>%
round(2)
ESS<-cbind(c("part a","part b","part c"),ESS)
knitr::kable(ESS,caption = "Effective Sample Size",col.names = c("Scheme","$\\beta_0$","$\\beta_1$")%>%kableExtra::kable_styling(full_width = FALSE)
ESS<-rbind(mcmcse::ess(part_a$beta),mcmcse::ess(part_b$beta),mcmcse::ess(part_c$beta))%>%
round(2)
ESS<-cbind(c("part a","part b","part c"),ESS)
knitr::kable(ESS,caption = "Effective Sample Size",col.names = c("Scheme","$\\beta_0$","$\\beta_1$"))%>%kableExtra::kable_styling(full_width = FALSE)
ESS<-rbind(mcmcse::ess(part_a$beta),mcmcse::ess(part_b$beta),mcmcse::ess(part_c$beta))%>%
round(2)
ESS<-cbind(c("part a","part b","part c"),ESS)
knitr::kable(ESS,caption = "Effective Sample Size",col.names = c("Scheme","$\\beta_0$","$\\beta_1$"),align = "ccc")%>%kableExtra::kable_styling(full_width = FALSE)
?knitr::kable
ESS<-rbind(mcmcse::ess(part_a$beta),mcmcse::ess(part_b$beta),mcmcse::ess(part_c$beta))%>%
round(2)
ESS<-cbind(c("part a","part b","part c"),ESS)
ACC<-rbind(apply(part_a$beta,2,function(x) unique(x)%>%length()/i),apply(part_b$beta,2,function(x) unique(x)%>%length()/i))
ACC<-cbind(c("part a","part b"),ACC)
knitr::kable(ESS,caption = "<center><strong>Effective Sample Sizes</strong></center>",col.names = c("Scheme","$\\beta_0$","$\\beta_1$"),align = "ccc")%>%kableExtra::kable_styling(full_width = FALSE)
knitr::kable(ACC,caption = "<center><strong>Acceptance Rate</strong></center>",col.names = c("Scheme","$\\beta_0$","$\\beta_1$"),align = "ccc")%>%kableExtra::kable_styling(full_width = FALSE)
ESS<-rbind(mcmcse::ess(part_a$beta),mcmcse::ess(part_b$beta),mcmcse::ess(part_c$beta))%>%
round(2)
ESS<-cbind(c("part a","part b","part c"),ESS)
ACC<-rbind(apply(part_a$beta,2,function(x) unique(x)%>%length()/i),apply(part_b$beta,2,function(x) unique(x)%>%length()/i))
ACC<-cbind(c("part a","part b"),ACC)
DIC_TAB<-rbind(c(part_a$DIC,part_a$pD),c(part_b$DIC,part_b$pD),c(part_c$DIC,part_c$pD))
knitr::kable(ESS,caption = "<center><strong>Effective Sample Sizes</strong></center>",col.names = c("Scheme","$\\beta_0$","$\\beta_1$"),align = "ccc")%>%kableExtra::kable_styling(full_width = FALSE)
knitr::kable(ACC,caption = "<center><strong>Acceptance Rate</strong></center>",col.names = c("Scheme","$\\beta_0$","$\\beta_1$"),align = "ccc")%>%kableExtra::kable_styling(full_width = FALSE)
knitr::kable(DIC_TAB,caption = "<center><strong>Deviance Information Criteria</strong></center>",col.names = c("Scheme","DIC","$p_D$"),align = "ccc")%>%kableExtra::kable_styling(full_width = FALSE)
ESS<-rbind(mcmcse::ess(part_a$beta),mcmcse::ess(part_b$beta),mcmcse::ess(part_c$beta))%>%
round(2)
ESS<-cbind(c("part a","part b","part c"),ESS)
ACC<-rbind(apply(part_a$beta,2,function(x) unique(x)%>%length()/i),apply(part_b$beta,2,function(x) unique(x)%>%length()/i))
ACC<-cbind(c("part a","part b"),ACC)
DIC_TAB<-rbind(c(part_a$DIC,part_a$pD),c(part_b$DIC,part_b$pD),c(part_c$DIC,part_c$pD))
DIC_TAB<-cbind(c("part a","part b","part c"),DIC_TAB)
knitr::kable(ESS,caption = "<center><strong>Effective Sample Sizes</strong></center>",col.names = c("Scheme","$\\beta_0$","$\\beta_1$"),align = "ccc")%>%kableExtra::kable_styling(full_width = FALSE)
knitr::kable(ACC,caption = "<center><strong>Acceptance Rate</strong></center>",col.names = c("Scheme","$\\beta_0$","$\\beta_1$"),align = "ccc")%>%kableExtra::kable_styling(full_width = FALSE)
knitr::kable(DIC_TAB,caption = "<center><strong>Deviance Information Criteria</strong></center>",col.names = c("Scheme","DIC","$p_D$"),align = "ccc")%>%kableExtra::kable_styling(full_width = FALSE)
ESS<-rbind(mcmcse::ess(part_a$beta),mcmcse::ess(part_b$beta),mcmcse::ess(part_c$beta))%>%
round(2)
ESS<-cbind(c("part a","part b","part c"),ESS)
ACC<-rbind(apply(part_a$beta,2,function(x) unique(x)%>%length()/i),apply(part_b$beta,2,function(x) unique(x)%>%length()/i))
ACC<-cbind(c("part a","part b"),ACC)
DIC_TAB<-rbind(c(part_a$DIC,part_a$pD),c(part_b$DIC,part_b$pD),c(part_c$DIC,part_c$pD))%>%round(2)
DIC_TAB<-cbind(c("part a","part b","part c"),DIC_TAB)
knitr::kable(ESS,caption = "<center><strong>Effective Sample Sizes</strong></center>",col.names = c("Scheme","$\\beta_0$","$\\beta_1$"),align = "ccc")%>%kableExtra::kable_styling(full_width = FALSE)
knitr::kable(ACC,caption = "<center><strong>Acceptance Rate</strong></center>",col.names = c("Scheme","$\\beta_0$","$\\beta_1$"),align = "ccc")%>%kableExtra::kable_styling(full_width = FALSE)
knitr::kable(DIC_TAB,caption = "<center><strong>Deviance Information Criteria</strong></center>",col.names = c("Scheme","DIC","$p_D$"),align = "ccc")%>%kableExtra::kable_styling(full_width = FALSE)
PROB<-c(sum(part_a$beta[,2]<0)/n,sum(part_b$beta[,2]<0)/n,sum(part_c$beta[,2]<0)/n)
PROB<-cbind(c("part a","part b","part c"),PROB)
knitr::kable(PROB,col.names = c("Scheme","$Pr(\\beta_1<0)$"),align = "cc")%>%kableExtra::kable_styling(full_width = FALSE)
PROB<-c(sum(part_a$beta[,2]<0)/n,sum(part_b$beta[,2]<0)/n,sum(part_c$beta[,2]<0)/n)
PROB<-cbind(c("part a","part b","part c"),PROB)
knitr::kable(PROB,col.names = c("Scheme","$Pr(\\\\beta_1<0)$"),align = "cc")%>%kableExtra::kable_styling(full_width = FALSE)
PROB<-c(sum(part_a$beta[,2]<0)/n,sum(part_b$beta[,2]<0)/n,sum(part_c$beta[,2]<0)/n)
PROB<-cbind(c("part a","part b","part c"),PROB)
knitr::kable(PROB,col.names = c("Scheme","$Pr(\\beta_1<0)$"),align = "cc")%>%kableExtra::kable_styling(full_width = FALSE)
setwd("~/OneDrive - Queensland University of Technology/WEBSITES/MXB107_Site/")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
sy
epa_data
ggplot(epa_data)+geom_bar(aes(x=make,y = model))
ggplot(epa_data)+geom_bar(aes(x=make,y = stat_count(model)))
ggplot(epa_data)+geom_bar(aes(y = stat_count(model)))
ggplot(epa_data)+geom_bar()
ggplot(epa_data)+geom_bar(aes(x=make))
unique(epa_data$make)%>%length()
?mutate
knitr::opts_chunk$set(
fig.align = 'center',
collapse = TRUE,
comment = "#>")
library(MXB107)
df<-epa_data%>%transmutate(make = unique(make),count=stat_count(make))
df<-epa_data%>%transmute(make = unique(make),count=stat_count(make))
epa_data%>%reorder(make,model,sum)
head(epa_data)
summarise(epa_data,make,model)
summarise(epa_data,make,stat_count(model))
?stat_contour
?stat_count
ggplot(epa_data,aes(reorder(make,model),x=make))+geom_bar()
ggplot(epa_data,aes(reorder(make,model),y=model))+geom_bar()
ggplot(epa_data,aes(reorder(make,model),y=make))+geom_bar()
ggplot(epa_data,aes(reorder(make,count(model)),y=make))+geom_bar()
ggplot(epa_data,aes(reorder(make,stat_count(model)),y=make))+geom_bar()
ggplot(epa_data,aes(reorder(make,stat_count(model)),y=make))+geom_bar()\
stat_count(epa_data$model)
aes(stat_count(epa_data$model))
ggplot(epa_data,aes(x = reorder(make,stat_count(model)),y=make))+geom_bar()\
ggplot(epa_data,aes(x = reorder(make,stat_count(model)),y=make))+geom_bar()
ggplot(epa_data,aes(x = reorder(make,model),y=model))+geom_bar()
ggplot(epa_data,aes(x = reorder(make,model),y=stat_count(model)))+geom_bar()
ggplot(epa_data,aes(x = reorder(make,stat_count(model)),y=stat_count(model)))+geom_bar()
df<-epa_data%>%table(make,model)
table()
table(epa_data$make,epa_data$model)
table(epa_data$make,epa_data$model)%>%head()
summarise(epa_data,make,model)
summarise(epa_data,make,model,sum())
summarise(epa_data,make,count(model))
?summarise
summarise(epa_data,make,n = count(model))
summarise(epa_data,identity(make),n = count(model))
count(epa_data$make)
?count
tally(epa_data$make)
epa_data%>%count(make)
epa_data%>%summarise(make,count(model))
epa_data%>%summarise(make,tally(model))
epa_data%>%summarise(count(make)
)
epa_data%>%summarise(make,n = count(model))
epa_data%>%count(model)
epa_data%>%count(model,make)
epa_data%>%count(make,model)
epa_data%>%count(make,model)%>%summarise(make)
epa_data%>%count(make,model)%>%summarise(make,n=sum(n))
epa_data%>%count(make,model)%>%summarise(make,n=count(n))
epa_data%>%count(make,model)%>%summarise(make,count(n))
epa_data%>%count(make,model)%>%group_by(make)
epa_data%>%count(make,model)
epa_data%>%count(make,model)%>%count(n)
epa_data%>%count(make,model)%>%count(mofel)
epa_data%>%count(make,model)%>%count(model)
epa_data%>%count(make,model)%>%count(make)
df<-epa_data%>%count(make,model)%>%count(make)
ggplot(df,aes(reorder(make,n)))+
geom_bar()
reorder(make,n)
df%>%reorder(make,n)
names(df)
?reorder
df%>%reorder(make,n,FUN="identity")
epa_data%>%count(make,model)%>%reorder(model)
epa_data%>%count(make,model)%>%count(make)
epa_data%>%count(make,model)%>%count(make)%>%reorder(make,n)
epa_data%>%count(make,model)%>%count(make)%>%reorder(make,n,FUN=identity())
epa_data%>%count(make,model)%>%count(make)%>%reorder(make,n,FUN=identity(x))
epa_data%>%count(make,model)%>%count(make)%>%reorder(make,n,identity)
reorder(df$make,df$n,identity)
?order
df%>%order(make,model)
df%>%order(make,n)
df%>%order(n)
order(df$n)
head(df)
df%>%arrange(desc(n))
df<-epa_data%>%count(make,model)%>%count(make)%>%arrange(desc(n))
ggplot(df,aes(make))+
geom_bar()
head(df)
ggplot(df[1:10,],aes(make))+
geom_bar()
ggplot(df[1:10,],aes(make,n))+
geom_bar()
ggplot(df[1:10,],aes(y=n))+
geom_bar()
df<-epa_data%>%count(make,model)%>%count(make)%>%arrange(desc(n))
ggplot(df[1:10,])+
geom_bar(aes(y=n),stat="identity")
ggplot(df[1:10,])+
geom_bar(aes(x=make,y=n),stat="identity")
ggplot(df[1:10,])+
geom_bar(aes(x=reorder(make,n),y=n),stat="identity")
?reorder
ggplot(df[1:10,])+
geom_bar(aes(x=reorder(make,-n),y=n),stat="identity")
epa_data$make==Acura
epa_data$make=="Acura"
sum(epa_data$make=="Acura")
sum(epa_data$make=="Mercedes-Benz")
epa_data%>%count(make)
##  Simple Barplot
##  The ggplot command takes a dataframe as an argument,
##  you can also specify the aesthetics "aes()" to
##  associate variables with specific axes of your plot
##  geom_bar() specifies that we want a bar plot, ggtitle adds the title and theme centers it
##  over the plot.
make_bar<-ggplot(epa_data,aes(x = make))+geom_bar()+
xlab("Manufacturer")+
ylab("Number of models")+
ggtitle("Number of Models by Make for the Top 10 Manufacturers")+
theme(plot.title = element_text(hjust = 0.5))
##  Pareto Plot
##  We create a new dataframe called "df" to count the number of models per manufacturer
##  Then aggregate that by manufacturer and arrange the data in descending order by count ("n")
##  We then use ggplot calling the first 10 rows only and plot the results from largest to
##  smaller from left to right.  Finally we add a title and center it over the plot.
df<-epa_data%>%
count(make)%>%
arrange(desc(n))
make_pareto<-ggplot(df[1:10,])+
geom_bar(aes(x=reorder(make,-n),y=n),stat="identity")+
xlab("Manufacturer")+
ylab("Number of models")+
ggtitle("Number of Models by Make for the Top 10 Manufacturers")+
theme(plot.title = element_text(hjust = 0.5))
make_bar
make_pareto
make_pareto<-ggplot(df[1:10,])+
geom_bar(aes(x=reorder(make,-n),y=n),stat="identity")+
xlab("Manufacturer")+
ylab("Number of models")+
ggtitle("Number of Models by Make for the Top 10 Manufacturers")+
theme(plot.title = element_text(hjust = 0.5))
?filter
df
##  We can use the data set `epa_data` directly in `ggplot` with
##  the `stat_summary()` function to plot yearly averages for fuel economy
mean_mpg_year<-ggplot(epa_data,aes(x = year, y = city))+
stat_summary(geom = "line", fun = "mean")+
xlab("Year")+
ylab("City MPG")+
ggtitle("EPA City MPG by Year")+
theme(plot.title = element_text(hjust = 0.5))
mean_mpg_year
mpg_1990<-epa_data%>%filter(year == 1990)%>%
ggplot(aes(city))+
geom_histogram(aes(y=..density..), binwidth = 2)+
xlab("City MPG")+
ylab("Relative Frequency")+
ggtitle("EPA City MPG for 1990")+
theme(plot.title = element_text(hjust = 0.5))
mpg_1990
ggplot(epa_data%>%filter(year==1990))+geom_histogram(aes(x = city)+geom_histogram(aes(x = hwy))
)
ggplot(epa_data%>%filter(year==1990))+geom_histogram(aes(x = city))+geom_histogram(aes(x = hwy))
ggplot(epa_data%>%filter(year==1990))+geom_histogram(aes(x = city))+geom_histogram(aes(x = hwy))
ggplot(epa_data%>%filter(year==1990))+
geom_histogram(aes(x = city))+
geom_histogram(aes(x = hwy))+
facet_wrap()
library(gridExtra)
city.plot<-epa_data%>%
filter(year == 1990)%>%
ggplot(aes(city))+
geom_histogram()
hwy.plot<-epa_data%>%
filter(year == 1990)%>%
ggplot(aes(hwy))+
geom_histogram()
grid.arrange(city.plot,hwy.plot,nrow = 1, ncol = 2)
ggplot(epa_data%>%filter(year==1990))+
geom_histogram(aes(x = city))+
geom_histogram(aes(x = hwy))+
facet_wrap(~x)
df<-epa_data%>%filter(year==1990)%>%pivot_longer(cols=c(city,hwy))
df
?pivot_longer
df<-epa_data%>%filter(year==1990)%>%pivot_longer(cols=c(city,hwy),names_to = "mpg")
df
df<-epa_data%>%filter(year==1990)%>%pivot_longer(cols=c(city,hwy),names_to = "mpg")
ggplot(df,aes(value))+
geom_histogram()+
facet_wrap(~mpg)
df<-epa_data%>%filter(year==1990)%>%pivot_longer(cols=c(city,hwy),names_to = "mpg")
ggplot(df,aes(value))+
geom_histogram()+
facet_wrap(~mpg)
df<-epa_data%>%filter(year==1990)%>%pivot_longer(cols=c(city,hwy),names_to = "mpg")
ggplot(df,aes(value))+
geom_histogram(aes(y= ..density..))+
facet_wrap(~mpg)
?facet_wrap
##  Create a new dataframe df by filtering the data for 1990
##  pivoting the table to a "long" format creating a new variable "type"
##  as either "city" or "hwy" with the mpg values labelled "mpg"
df<-epa_data%>%filter(year==1990)%>%
pivot_longer(cols=c(city,hwy),names_to = "type",values_to = "mpg")
##  We then use ggplot to create histograms specifying that we want the
##  density not the frequency as the heights of the bars.  Finally,
##  We use facet_wrap to create the side-by-side plots with axes different f
##  or each type (scales = "free")
mpg_hist_free<-ggplot(df,aes(value))+
geom_histogram(aes(y= ..density..))+
facet_wrap(~type,scales="free")+
xlab("MPG")+
ggtitle("City MPG 1990")+
theme(plot.title = element_text(hjust = 0.5))
##  Now create the same plot but force the axes to match (scales = "fixed")
mpg_hist_fixed<-ggplot(df,aes(value))+
geom_histogram(aes(y= ..density..))+
facet_wrap(~type,scales="fixed")+
xlab("MPG")+
ggtitle("Highway MPG 1990")+
theme(plot.title = element_text(hjust = 0.5))
mpg_hist_free
##  Create a new dataframe df by filtering the data for 1990
##  pivoting the table to a "long" format creating a new variable "type"
##  as either "city" or "hwy" with the mpg values labelled "mpg"
df<-epa_data%>%filter(year==1990)%>%
pivot_longer(cols=c(city,hwy),names_to = "type",values_to = "mpg")
##  We then use ggplot to create histograms specifying that we want the
##  density not the frequency as the heights of the bars.  Finally,
##  We use facet_wrap to create the side-by-side plots with axes different f
##  or each type (scales = "free")
mpg_hist_free<-ggplot(df,aes(mpg))+
geom_histogram(aes(y= ..density..))+
facet_wrap(~type,scales="free")+
xlab("MPG")+
ggtitle("City MPG 1990")+
theme(plot.title = element_text(hjust = 0.5))
##  Now create the same plot but force the axes to match (scales = "fixed")
mpg_hist_fixed<-ggplot(df,aes(mpg))+
geom_histogram(aes(y= ..density..))+
facet_wrap(~type,scales="fixed")+
xlab("MPG")+
ggtitle("Highway MPG 1990")+
theme(plot.title = element_text(hjust = 0.5))
mpg_hist_free
mpg_hist_fixed
?epa_data
setwd("~/OneDrive - Queensland University of Technology/PACKAGES/MXB107/")
update.packages("xfun")
library(MXB107)
